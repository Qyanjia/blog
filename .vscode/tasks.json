// Available variables which can be used inside of strings.
// ${workspaceRoot}: the root folder of the team
// ${file}: the current opened file
// ${fileBasename}: the current opened file's basename
// ${fileDirname}: the current opened file's dirname
// ${fileExtname}: the current opened file's extension
// ${cwd}: the current working directory of the spawned process
{
    "version": "2.0.0",
    "command": "cargo",
    "type": "shell",
    "suppressTaskName": true,
    "tasks": [
        {
            "label": "cargo build",
            "args": [ "build", "-v" ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "problemMatcher": [
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\d+):(\\d+)\\s+(warning|error):\\s+(.*)$",
                        "file": 1, "line": 2, "column": 3, "endLine": 4, "endColumn": 5, "severity": 6, "message": 7
                    }
                }
            ]
        },
        {
            "label": "cargo clean",
            "args": [ "clean" ],
            "presentation": {
                "echo": true,
                "reveal": "never",
                "panel": "shared"
            },
        },
        {
            "label": "cargo run",
            "args": [ "run", "-v" ],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "group": "build",
            "problemMatcher": [
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\d+):(\\d+)\\s+(warning|error):\\s+(.*)$",
                        "file": 1, "line": 2, "column": 3, "endLine": 4, "endColumn": 5, "severity": 6, "message": 7
                    }
                }
            ]
        },
        {
            "label": "cargo test",
            "args": [ "test" ],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "group": "test",
            "problemMatcher": [
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\d+):(\\d+)\\s+(warning|error):\\s+(.*)$",
                        "file": 1, "line": 2, "column": 3, "endLine": 4, "endColumn": 5, "severity": 6, "message": 7
                    }
                },
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "severity": "error",
                    "pattern": {
                        "regexp": "^.*panicked\\s+at\\s+'(.*)',\\s+(.*):(\\d+)$",
                        "message": 1, "file": 2, "line": 3
                    }
                }
            ]
        },
        {
            "label": "cargo bench",
            "args": [ "bench" ],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "shared"
            },
            "group": "test",
            "problemMatcher": [
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\d+):(\\d+)\\s+(warning|error):\\s+(.*)$",
                        "file": 1, "line": 2, "column": 3, "endLine": 4, "endColumn": 5, "severity": 6, "message": 7
                    }
                },
                {
                    "owner": "rust",
                    "fileLocation": [ "relative", "${workspaceRoot}" ],
                    "severity": "error",
                    "pattern": {
                        "regexp": "^.*panicked\\s+at\\s+'(.*)',\\s+(.*):(\\d+)$",
                        "message": 1, "file": 2, "line": 3
                    }
                }
            ]
        }
    ]
}